name: 'Deploy to AKS with Helm'
description: 'Deploys an app to AKS using Helm'
inputs:
  db_name:
    description: 'The database name'
    required: true
    default: ''
  db_pass:
    description: 'The database password'
    required: true
    default: ''
  db_port:
    description: 'The database port'
    required: true
    default: ''
  db_user:
    description: 'The database username'
    required: true
    default: ''
  db_host:
    description: 'The database host'
    required: true
    default: ''
  acr_name:
    description: 'Azure Container Registry name'
    required: true
    type: string
  acr_password:
    description: 'Azure Container Registry pass'
    required: true
    type: string
  acr_email:
    description: 'Azure Container Registry email'
    required: true
    type: string
  image_name:
    description: 'Name of the Docker image'
    required: true
    type: string
  image_tag:
    description: 'Tag for the Docker image'
    required: true
    type: string
  arm_client_id:
    description: 'Azure Client ID'
    required: true
    type: string
  arm_client_secret:
    description: 'Azure Client Secret'
    required: true
    type: string
  arm_tenant_id:
    description: 'Azure Tenant ID'
    required: true
    type: string
  arm_subscription_id:
    description: 'Azure Subscription ID'
    required: true
    type: string
  aks_resource_group:
    description: 'Azure Resource Group of AKS'
    required: true
    type: string
  aks_cluster_name:
    description: 'Azure AKS Cluster Name'
    required: true
    type: string
  acr_secret_name:
    description: 'Kubernetes secret for ACR'
    required: true
    type: string
  harbor_ip:
    description: 'URL of the Harbor registry to download Helm'
    required: true
    type: string
  harbor_username:
    description: 'Username for Harbor'
    required: true
    type: string
  harbor_password:
    description: 'Password for Harbor'
    required: true
    type: string
  chart_name:
    description: 'Password for Harbor'
    required: true
    type: string

runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Login to Azure with Service Principal
      run: |
        az login --service-principal \
          -u ${{ inputs.arm_client_id }} \
          -p ${{ inputs.arm_client_secret }} \
          --tenant ${{ inputs.arm_tenant_id }}
      shell: bash

    - name: Install Helm
      shell: bash
      run: |
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

    - name: Get AKS credentials
      run: |
        az aks get-credentials --resource-group ${{ inputs.aks_resource_group }} --name ${{ inputs.aks_cluster_name }}
      shell: bash
    - name: Log in to ACR
      run: |
        az acr login --name ${{ inputs.acr_name }}
      shell: bash
    - name: Helm Login
      run: |
        helm registry login ${{ inputs.harbor_ip }} --username ${{ inputs.harbor_username }} --password ${{ inputs.harbor_password }}
      shell: bash

    - name: Delete secret if exists
      run: |
        kubectl delete secret ${{inputs.acr_secret_name}} --ignore-not-found 
      shell: bash

    
    - name: Create acr secret
      run: |
        kubectl create secret docker-registry ${{ inputs.acr_secret_name }} \
        --docker-server=${{ inputs.acr_name }}.azurecr.io \
        --docker-username=${{ inputs.arm_client_id }} \
        --docker-password=${{ inputs.arm_client_secret }} \
      shell: bash

    - name: Deploy with Helm
      run: |
        helm upgrade --install ${{inputs.chart_name}} oci://${{inputs.harbor_ip}}/${{inputs.harbor_username}}/${{inputs.chart_name}} \
          --namespace default \
          --set "database.SPRING_DB_HOST=${{ inputs.db_host }}" \
          --set "database.SPRING_DB_PORT=${{ inputs.db_port }}" \
          --set "database.SPRING_DB_NAME=${{ inputs.db_name }}" \
          --set "database.SPRING_DB_USER=${{ inputs.db_user }}" \
          --set "database.SPRING_DB_PASSWORD=${{ inputs.db_pass }}" \
          --set "image.repository=${{ inputs.acr_name }}.azurecr.io/${{ inputs.image_name }}" \
          --set "image.tag=${{ inputs.image_tag }}" \
          --set "image.pullSecret=${{ inputs.acr_secret_name }}"
      shell: bash
          
#   --set "image.tag=1.0" \
# --set "image.repository=${{ inputs.acr_name }}.azurecr.io/${{ inputs.image_name }}" \
# --set "image.tag=${{ inputs.image_tag }}" \
# --set "image.pullSecret=${{ inputs.acr_secret_name }}"
# --set "image.repository=jrochadev/backend" \
      
